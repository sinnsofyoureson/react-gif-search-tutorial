{"version":3,"sources":["components/SearchBar.js","components/GifItem.js","components/GifList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","setState","props","onTermChange","_this2","react_default","a","createElement","className","onChange","e","onInputChange","target","value","Component","GifItem","image","src","gif","images","downsized","url","GifList","gifItems","gifs","map","components_GifItem","key","id","App","handleTermChange","concat","replace","request","get","err","res","body","data","components_SearchBar","components_GifList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAsBeA,cAnBX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CAAEC,KAAM,IAFXR,6EAKAQ,GACVL,KAAKM,SAAS,CAACD,SACfL,KAAKO,MAAMC,aAAaH,oCAGnB,IAAAI,EAAAT,KACL,OACAU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,SAAOE,SAAU,SAAAC,GAAC,OAAIN,EAAKO,cAAcD,EAAEE,OAAOC,kBAdtCC,aCQTC,EARC,SAACC,GACb,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKU,IAAKD,EAAME,IAAIC,OAAOC,UAAUC,QCQlCC,EAVC,SAACpB,GACb,IAAMqB,EAAWrB,EAAMsB,KAAKC,IAAI,SAACT,GAC7B,OAAOX,EAAAC,EAAAC,cAACmB,EAAD,CAASC,IAAKX,EAAMY,GAAIV,IAAKF,MAGxC,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYe,IC4BpBM,cA5Bb,SAAAA,IAAc,IAAArC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IACZrC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,QAOFmC,iBAAmB,SAAC9B,GAClB,IAAMqB,EAAG,mFAAAU,OAAsF/B,EAAKgC,QAAQ,MAAO,KAA1G,+BAETC,IAAQC,IAAIb,EAAK,SAACc,EAAKC,GACrB5C,EAAKS,SAAS,CAAEuB,KAAMY,EAAIC,KAAKC,UATjC9C,EAAKO,MAAQ,CACXyB,KAAM,IAJIhC,wEAiBZ,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgC,EAAD,CAAWpC,aAAcR,KAAKmC,mBAC9BzB,EAAAC,EAAAC,cAACiC,EAAD,CAAShB,KAAM7B,KAAKI,MAAMyB,gBAvBlBV,aCKE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.be67f41b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass SearchBar extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { term: '' }\r\n    }\r\n\r\n    onInputChange(term) {\r\n        this.setState({term});\r\n        this.props.onTermChange(term);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"search\">\r\n            <input onChange={e => this.onInputChange(e.target.value)} />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nconst GifItem = (image) => {\r\n    return (\r\n        <div className=\"gif-item\">\r\n            <img src={image.gif.images.downsized.url} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default GifItem;","import React from 'react';\r\nimport GifItem from './GifItem';\r\n\r\nconst GifList = (props) => {\r\n    const gifItems = props.gifs.map((image) => {\r\n        return <GifItem key={image.id} gif={image} />\r\n    });\r\n\r\n    return (\r\n        <div className=\"gif-list\">{gifItems}</div>\r\n    );\r\n};\r\n\r\nexport default GifList;","import React, { Component } from 'react';\nimport './App.css';\nimport request from 'superagent';\n\nimport SearchBar from './components/SearchBar';\nimport GifList from './components/GifList';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      gifs: []\n    }\n  }\n\n  handleTermChange = (term) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=RQ6eqXHIgjE98KJkT7YeLcH5GBh4vB6L&q=${term.replace(/\\s/g, '+')}&limit=27&offset=0&rating=R`;\n\n    request.get(url, (err, res) => {\n      this.setState({ gifs: res.body.data })\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <SearchBar onTermChange={this.handleTermChange} />\n          <GifList gifs={this.state.gifs} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}